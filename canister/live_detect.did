type Action = variant { Move : Movement; Speech : text };
type BatchAction = record { movement : vec Movement; speech : text };
type Movement = variant { Nod; Shake; Blink; Mouth };
type Result = variant { Ok : nat32; Err : TokenError };
type Result_1 = variant { Ok : bool; Err : TokenError };
type Result_2 = variant { Ok : BatchAction; Err : TokenError };
type Result_3 = variant { Ok : Token; Err : TokenError };
type Token = record {
  action : Action;
  active : bool;
  create_at : nat64;
  scope : text;
};
type TokenError = variant {
  CallerNotExist;
  TokenNotActive;
  SecretError;
  TokenExpired;
  CallError;
  TokenNotExist;
  TokenInvalid;
};
service : (principal) -> {
  add_manager : (principal) -> ();
  claimNFT : (text) -> (Result);
  detect_end : (text) -> (Result_1);
  detect_start : (text) -> (Result_2);
  get_nft_canister : () -> (principal) query;
  get_token : (text) -> (Result_3) query;
  is_alive : (text) -> (Result_1) query;
  is_manager : (principal) -> (bool) query;
  is_user_alive : (principal, text) -> (Result_1) query;
  set_nft_canister : (principal) -> ();
}