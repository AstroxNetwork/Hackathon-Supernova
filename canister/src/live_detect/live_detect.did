type Movement = variant { Blink; Mouth; Shake; Nod };
type TokenError = variant { CallerNotExist; TokenNotExist; TokenInvalid; TokenExpired };
type Action = variant { Move: Movement; Speech: text };

type Token = record {
  scope : text;
  action : Action;
  active : bool;
  create_at : nat64;
};

type Result = variant { Ok: bool; Err : TokenError };
type Result_2 = variant { Ok: Action; Err : TokenError };
type Result_3 = variant { Ok: Token; Err : TokenError };

service : {
    "detect_start": (text, nat8) -> (Result_2);
    "detect_end": (text, Action) -> (Result);
    "is_alive": (text) -> (Result) query;
    "get_token": (text) -> (Result_3) query;
}
